import g4f
import random
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout, QPushButton, QCheckBox, QTextEdit

rubricks_text = '"–ü–æ–ª–µ–∑–Ω—ã–µ python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ü–æ–ª–µ–∑–Ω—ã–µ JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ë–∞–∑–∞ python", "–ë–∞–∑–∞ JavaScript"'
example = '''üîäüêç –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –æ–¥–Ω–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º –º–æ–¥—É–ª–µ –¥–ª—è Python - gTTS (Google Text-to-Speech)!

üéß gTTS - —ç—Ç–æ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ Google. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –≤ —Å–≤–æ–∏ Python-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

‚û°Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gTTS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:

üìö –ê—É–¥–∏–æ–∫–Ω–∏–≥ –∏–ª–∏ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
üéô –ü–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
üåê –û–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üîÆ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gTTS:

1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gTTS —Å –ø–æ–º–æ—â—å—é pip: pip install gTTS.
2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª—å gTTS: from gtts import gTTS.
3Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä gTTS –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ä–µ—á—å: tts = gTTS('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!').
4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ save: tts.save('hello.mp3').

üí° –ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫!

üëç –ù–∞–¥–µ—é—Å—å, —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ gTTS –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–π –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã - —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!

#Python #gTTS #—Å–∏–Ω—Ç–µ–∑—Ä–µ—á–∏ #–∞—É–¥–∏–æ–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
'''
        
class PostGenerator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤")
        self.setGeometry(100, 100, 400, 300)
        
        self.num_posts = QLineEdit()
        self.emoji_checkbox = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏")
        self.example_text = QTextEdit()
        self.unposting_text = QTextEdit()
        self.rubricks = QTextEdit()        
        
        self.generate_button = QPushButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã")
        self.generate_button.clicked.connect(self.generate_posts)
        
        layout = QVBoxLayout()
        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:"))
        layout.addWidget(self.num_posts)
        layout.addWidget(self.emoji_checkbox)
        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –ø–æ—Å—Ç–∞:"))
        layout.addWidget(self.example_text)
        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã:"))
        layout.addWidget(self.unposting_text)
        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ —Ä—É–±—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞:"))
        layout.addWidget(self.rubricks)
        layout.addWidget(self.generate_button)

        self.setLayout(layout)
       
       # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ example_text
        self.example_text.setText(example)
        self.rubricks.setText(rubricks_text)
        self.num_posts.setText('1')
    
    def generate_posts(self):
        num = int(self.num_posts.text())
        use_emoji = self.emoji_checkbox.isChecked()
        example = self.example_text.toPlainText()
        unposting = self.unposting_text.toPlainText()
        rubricks = self.rubricks.toPlainText()
        
        rubricks_list = rubricks.split(',')
        rubricks_list = [item.strip() for item in rubricks_list]
        rubricks_str = ', '.join(['"{}"'.format(post) for post in rubricks_list])

        unposting_list = unposting.split(',')
        unposting_list = [item.strip() for item in unposting_list]
        unposting_str = ', '.join(['"{}"'.format(post) for post in unposting_list])

        for i in range(num):
            random_index = random.randint(0, len(rubricks_list) - 1)

            print('–†—É–±—Ä–∏–∫–∞:  '+rubricks_list[random_index])
            prompt_1 = '–ü—Ä–∏–≤–µ—Ç, —è –≤–µ–¥—É —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –û–î–ù–£ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Ä—É–±—Ä–∏–∫–µ: '+rubricks_list[random_index]+'–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–º—É, –±–µ–∑ –∫–∞–∫–∏—Ö –ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π!'+'–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ç–µ–º—ã:'+self.unposting_text.toPlainText()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —É ChatGPT
            response = g4f.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt_1}],
                max_tokens = 10,
                stream=False,
            )

            print('–¢–µ–º–∞ –¥–ª—è –ø–æ—Å—Ç–∞:  '+response)

            use_emoji = '–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏!'
            if self.emoji_checkbox.isChecked():
                use_emoji = '–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.'

            prompt_2 = '–ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –≤—Å–µ–º–æ–≥—É—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ò–≤–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π c —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—à–µ—Ç –ø–æ—Å—Ç—ã –≤ —Å–≤–æ–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ, –ø–æ–ø—Ä–æ–±—É–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –Ω–µ–≥–æ.'+use_emoji+response+'–ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:'+example

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —É ChatGPT
            response = g4f.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt_2}],
                stream=False,
            )

            print(response)
            print('')

if __name__ == '__main__':
   app = QApplication(sys.argv)
   post_generator = PostGenerator()
   post_generator.show()
   sys.exit(app.exec_())